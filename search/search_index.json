{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Next-generation developer-first NoSQL database. AnnaDB moves familiar programming languages' patterns into the databases world to solve the problem of the relations: Every object and sub-object (item of a vector or map) that was stored in AnnaDB has a link id. This link can be placed as a field value of any other object and the database will fetch and process it automatically on all the operations without additional commands in queries. Features: Flexible object structure Relations Transactions","title":"About"},{"location":"install/","text":"Server docker run --init -p 10001 :10001 -t romanright/annadb:0.0.1 Client shell Install pip install annadb Run annadb --uri annadb://localhost:10001","title":"Install"},{"location":"install/#server","text":"docker run --init -p 10001 :10001 -t romanright/annadb:0.0.1","title":"Server"},{"location":"install/#client-shell","text":"Install pip install annadb Run annadb --uri annadb://localhost:10001","title":"Client shell"},{"location":"articles/introduction/","text":"AnnaDB","title":"AnnaDB"},{"location":"articles/introduction/#annadb","text":"","title":"AnnaDB"},{"location":"documentation/data_types/","text":"There are primitive and container data types in AnnaDB. Primitives Primitive data types are a set of basic types whose values can not be decoupled. In TySON, primitives are represented as prefix|value| or prefix only. Prefix in AnnaDB shows the data type. Type Description Prefix Example Number Integer or float point number n n | 101 | String Any string. `|` symbols must be escaped with `\\` s s | Lorem ipsum | Bool A boolean value b b | true | Null A marker that indicating that something has no value null null Unix Timestamp The number of seconds that have elapsed since the Unix epoch uts uts | 123456789 | Link Id of an object. The collection name is used for the prefix Collection name users | e0bbcda2-0911-495e-9f0f-ce00db489f10 | Containers Container data types keep primitive and container objects using specific rules. Type Description Prefix Example Vector An ordered set of elements of any type v v [ n | 1 |, n | 2 |, n | 3 |,] Map An associative array m m { s | bar |: s | baz |,}","title":"Data Types"},{"location":"documentation/data_types/#primitives","text":"Primitive data types are a set of basic types whose values can not be decoupled. In TySON, primitives are represented as prefix|value| or prefix only. Prefix in AnnaDB shows the data type. Type Description Prefix Example Number Integer or float point number n n | 101 | String Any string. `|` symbols must be escaped with `\\` s s | Lorem ipsum | Bool A boolean value b b | true | Null A marker that indicating that something has no value null null Unix Timestamp The number of seconds that have elapsed since the Unix epoch uts uts | 123456789 | Link Id of an object. The collection name is used for the prefix Collection name users | e0bbcda2-0911-495e-9f0f-ce00db489f10 |","title":"Primitives"},{"location":"documentation/data_types/#containers","text":"Container data types keep primitive and container objects using specific rules. Type Description Prefix Example Vector An ordered set of elements of any type v v [ n | 1 |, n | 2 |, n | 3 |,] Map An associative array m m { s | bar |: s | baz |,}","title":"Containers"},{"location":"documentation/delete/","text":"Remove found objects or the whole collection. Prefix: delete Value: no value. Prefix-only primitive Can start the pipeline: No Steps before: find, get, sort, limit, offset Steps after: - Example Input: collection | test |: q [ find [ gt { value | num |: n | 5 |, }, ], delete , ]; Output: result : ok [ response { s | data |: ids [ test | 1895abc6-c0e3-4243-9421-1796265088db |, test | c18a697c-c535-4347-8bf4-5c86cf168883 |, test | 8cadf01e-4812-4515-affc-7e7191c248bf |, test | 633fd795-803b-46c8-8581-afe4989f2505 |, ], s | meta |: update_meta { s | count |: n | 4 |, }, }, ];","title":"Delete"},{"location":"documentation/delete/#example","text":"Input: collection | test |: q [ find [ gt { value | num |: n | 5 |, }, ], delete , ]; Output: result : ok [ response { s | data |: ids [ test | 1895abc6-c0e3-4243-9421-1796265088db |, test | c18a697c-c535-4347-8bf4-5c86cf168883 |, test | 8cadf01e-4812-4515-affc-7e7191c248bf |, test | 633fd795-803b-46c8-8581-afe4989f2505 |, ], s | meta |: update_meta { s | count |: n | 4 |, }, }, ];","title":"Example"},{"location":"documentation/find/","text":"Find objects using comparison and logical operators Prefix: find Value: Vector of operators Can start the pipeline: Yes Steps before: find, get, sort, limit, offset Steps after: find, get, sort, limit, offset, update, delete Comparison operators Equal - eq{...} Not equal - neq{...} Greater than - gt{...} Greater than or equeal - gte{...} Less than - lt{...} Less than or equal - lte{...} Less than or equal - lte{...} Logical operators And - and[...] Or - or[...] Not - not(...) In order to compare the value of the object root path notation could be used: eq { root: s | bar | } In order to compare a field of the object path to value notation could be used: eq { value | path.to.field | : s | bar | } Example Input: collection | test |: find [ gt { value | num |: n | 4 |, }, ]; Output: result : ok [ response { s | data |: objects { test | b68c9adc-e61a-43c4-a172-f890f0cc21cc |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 9810ba60-5cc4-4ec1-9b92-f089fdeebcc1 |: m { s | name |: s | test_9 |, s | num |: n | 9 |, }, test | 82c31a12-aaf4-4a87-a183-425aec38e30a |: m { s | name |: s | test_7 |, s | num |: n | 7 |, }, test | b87ae951-99c4-4437-86af-7a5a42047dcf |: m { s | name |: s | test_5 |, s | num |: n | 5 |, }, test | 9cb6962f-7afa-4e77-9a74-c5db71e646f7 |: m { s | name |: s | test_8 |, s | num |: n | 8 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Find"},{"location":"documentation/find/#comparison-operators","text":"Equal - eq{...} Not equal - neq{...} Greater than - gt{...} Greater than or equeal - gte{...} Less than - lt{...} Less than or equal - lte{...} Less than or equal - lte{...}","title":"Comparison operators"},{"location":"documentation/find/#logical-operators","text":"And - and[...] Or - or[...] Not - not(...) In order to compare the value of the object root path notation could be used: eq { root: s | bar | } In order to compare a field of the object path to value notation could be used: eq { value | path.to.field | : s | bar | }","title":"Logical operators"},{"location":"documentation/find/#example","text":"Input: collection | test |: find [ gt { value | num |: n | 4 |, }, ]; Output: result : ok [ response { s | data |: objects { test | b68c9adc-e61a-43c4-a172-f890f0cc21cc |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 9810ba60-5cc4-4ec1-9b92-f089fdeebcc1 |: m { s | name |: s | test_9 |, s | num |: n | 9 |, }, test | 82c31a12-aaf4-4a87-a183-425aec38e30a |: m { s | name |: s | test_7 |, s | num |: n | 7 |, }, test | b87ae951-99c4-4437-86af-7a5a42047dcf |: m { s | name |: s | test_5 |, s | num |: n | 5 |, }, test | 9cb6962f-7afa-4e77-9a74-c5db71e646f7 |: m { s | name |: s | test_8 |, s | num |: n | 8 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Example"},{"location":"documentation/get/","text":"Get one or many objects by id (link) Prefix: get Value: Vector of links Can start the pipeline: Yes Steps before: find, get, sort, limit, offset Steps after: find, get, sort, limit, offset, update, delete Examples collection | test |: get [ test | df1f5487-1bf7-4732-99db-5c4b6b599f18 |, test | 714b24b6-c54d-4720-a8f0-bbc632ca4c46 |, ]; Output: result : ok [ response { s | data |: objects { test | df1f5487-1bf7-4732-99db-5c4b6b599f18 |: s | foo |, test | 714b24b6-c54d-4720-a8f0-bbc632ca4c46 |: s | bar |, }, s | meta |: get_meta { s | count |: n | 2 |, }, }, ];","title":"Get"},{"location":"documentation/get/#examples","text":"collection | test |: get [ test | df1f5487-1bf7-4732-99db-5c4b6b599f18 |, test | 714b24b6-c54d-4720-a8f0-bbc632ca4c46 |, ]; Output: result : ok [ response { s | data |: objects { test | df1f5487-1bf7-4732-99db-5c4b6b599f18 |: s | foo |, test | 714b24b6-c54d-4720-a8f0-bbc632ca4c46 |: s | bar |, }, s | meta |: get_meta { s | count |: n | 2 |, }, }, ];","title":"Examples"},{"location":"documentation/insert/","text":"Insert one or many primitive or container objects Prefix: insert Value: Vector of object Can start the pipeline: Yes Steps before: - Steps after: - Example Input: collection | test |: insert [ s | foo |, n | 100 |, b | True |, v [ n | 1 |, n | 2 |, n | 3 |, ], m { s | bar |: s | baz |, }, ]; Output: result : ok [ response { s | data |: ids [ test | daaa8900-8edd-4165-949a-de06646856af |, test | 51dc6d98-8e8a-4478-831e-5d292a556733 |, test | b84c788d-2eb9-4e8e-999d-5cb2fb1a4fdc |, test | 71612f10-7921-4afe-a9de-6175f963a6ad |, test | 96ebe097-142d-404c-98d1-a69d94df310e |, ], s | meta |: insert_meta { s | count |: n | 5 |, }, }, ];","title":"Insert"},{"location":"documentation/insert/#example","text":"Input: collection | test |: insert [ s | foo |, n | 100 |, b | True |, v [ n | 1 |, n | 2 |, n | 3 |, ], m { s | bar |: s | baz |, }, ]; Output: result : ok [ response { s | data |: ids [ test | daaa8900-8edd-4165-949a-de06646856af |, test | 51dc6d98-8e8a-4478-831e-5d292a556733 |, test | b84c788d-2eb9-4e8e-999d-5cb2fb1a4fdc |, test | 71612f10-7921-4afe-a9de-6175f963a6ad |, test | 96ebe097-142d-404c-98d1-a69d94df310e |, ], s | meta |: insert_meta { s | count |: n | 5 |, }, }, ];","title":"Example"},{"location":"documentation/introduction/","text":"Collections AnnaDB stores objects in collections. Collections are analogous to tables in SQL databases. Every object and sub-object (item of a vector or map) that was stored in AnnaDB has a link id. This id consists of the collection name and unique uuid4 value. One object can contain links to objects from any collections - AnnaDB will fetch and process them on all the operations automatically without additional commands (joins or lookups) TySON AnnaDB query language uses the TySON format. The main difference from other data formats is that each item has a value and prefix. The prefix can mark the data type or query type (as it is used in AnnaDB) or any other information, useful for the parser. This adds more flexibility to the data structure design - it is allowed to use as many custom data types, as the developer needs. You can read more about the TySON format here Query Query in AnnaDB is a pipeline of steps, that should be applied in the order it was declared. The steps are wrapped into a vector with the prefix q - query. collection | test |: q [ find [ ], sort [ asc ( value | num |), ], limit ( n | 5 |), ]; If the pipeline has only one step, the q vector is not needed. collection | test |: find [ gt { value | num |: n | 4 |, }, ]; Transaction Every database call is a transaction with AnnaDB. You can send as many queries as you want together in a single call. If something will go wrong in the middle, all the queries in this transaction will be rolled back. Results of all the queries will be returned together in a vector in the respective order. collection | test |: q [ find [ gt { value | num |: n | 4 |, }, ], update [ set { value | blink2.a |: n | 100 |, }, ], ]; collection | test |: q [ find [ ], update [ set { value | blink2.e |: n | 1000 |, }, ], ]; Client AnnaDB shell client is an interactive terminal application, that connects to the DB instance, validates and handles queries. It fits well to play with query language or work with the data manually. Using from your app AnnaDB has a Python driver. It has an internal query builder - you don't need to learn AnnaDB query syntax to work with it. But it supports raw querying too. Python Driver Other languages will be supported soon too. If you want to help me with this, please text me - I'll provide all the information and tools.","title":"Introduction"},{"location":"documentation/introduction/#collections","text":"AnnaDB stores objects in collections. Collections are analogous to tables in SQL databases. Every object and sub-object (item of a vector or map) that was stored in AnnaDB has a link id. This id consists of the collection name and unique uuid4 value. One object can contain links to objects from any collections - AnnaDB will fetch and process them on all the operations automatically without additional commands (joins or lookups)","title":"Collections"},{"location":"documentation/introduction/#tyson","text":"AnnaDB query language uses the TySON format. The main difference from other data formats is that each item has a value and prefix. The prefix can mark the data type or query type (as it is used in AnnaDB) or any other information, useful for the parser. This adds more flexibility to the data structure design - it is allowed to use as many custom data types, as the developer needs. You can read more about the TySON format here","title":"TySON"},{"location":"documentation/introduction/#query","text":"Query in AnnaDB is a pipeline of steps, that should be applied in the order it was declared. The steps are wrapped into a vector with the prefix q - query. collection | test |: q [ find [ ], sort [ asc ( value | num |), ], limit ( n | 5 |), ]; If the pipeline has only one step, the q vector is not needed. collection | test |: find [ gt { value | num |: n | 4 |, }, ];","title":"Query"},{"location":"documentation/introduction/#transaction","text":"Every database call is a transaction with AnnaDB. You can send as many queries as you want together in a single call. If something will go wrong in the middle, all the queries in this transaction will be rolled back. Results of all the queries will be returned together in a vector in the respective order. collection | test |: q [ find [ gt { value | num |: n | 4 |, }, ], update [ set { value | blink2.a |: n | 100 |, }, ], ]; collection | test |: q [ find [ ], update [ set { value | blink2.e |: n | 1000 |, }, ], ];","title":"Transaction"},{"location":"documentation/introduction/#client","text":"AnnaDB shell client is an interactive terminal application, that connects to the DB instance, validates and handles queries. It fits well to play with query language or work with the data manually.","title":"Client"},{"location":"documentation/introduction/#using-from-your-app","text":"AnnaDB has a Python driver. It has an internal query builder - you don't need to learn AnnaDB query syntax to work with it. But it supports raw querying too. Python Driver Other languages will be supported soon too. If you want to help me with this, please text me - I'll provide all the information and tools.","title":"Using from your app"},{"location":"documentation/limit/","text":"Limit number of found objects Prefix: limit Value: Modifier with a number Can start the pipeline: No Steps before: find, get, sort, limit, offset Steps after: find, get, sort, limit, offset, update, delete Example Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], limit ( n | 5 |), ]; Output: result : ok [ response { s | data |: objects { test | e1eea347-40f8-4f89-8771-a045a61fbee8 |: m { s | name |: s | test_0 |, s | num |: n | 0 |, }, test | 904485ee-a49f-4b04-8507-2a2aeb2628fe |: m { s | name |: s | test_1 |, s | num |: n | 1 |, }, test | 0f4af520-b78d-4a9d-ac94-e09bb4dfbc89 |: m { s | name |: s | test_2 |, s | num |: n | 2 |, }, test | a3254526-3e6f-4fed-9b7d-7b0574aa2b8f |: m { s | name |: s | test_3 |, s | num |: n | 3 |, }, test | 8413fe99-e946-4cd8-a00f-7465d6f9c00a |: m { s | num |: n | 4 |, s | name |: s | test_4 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Limit"},{"location":"documentation/limit/#example","text":"Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], limit ( n | 5 |), ]; Output: result : ok [ response { s | data |: objects { test | e1eea347-40f8-4f89-8771-a045a61fbee8 |: m { s | name |: s | test_0 |, s | num |: n | 0 |, }, test | 904485ee-a49f-4b04-8507-2a2aeb2628fe |: m { s | name |: s | test_1 |, s | num |: n | 1 |, }, test | 0f4af520-b78d-4a9d-ac94-e09bb4dfbc89 |: m { s | name |: s | test_2 |, s | num |: n | 2 |, }, test | a3254526-3e6f-4fed-9b7d-7b0574aa2b8f |: m { s | name |: s | test_3 |, s | num |: n | 3 |, }, test | 8413fe99-e946-4cd8-a00f-7465d6f9c00a |: m { s | num |: n | 4 |, s | name |: s | test_4 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Example"},{"location":"documentation/offset/","text":"Skip number of found objects Prefix: offset Value: Modifier with a number Can start the pipeline: No Steps before: find, get, sort, limit, offset Steps after: find, get, sort, limit, offset, update, delete Example Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], offset ( n | 5 |), ]; Output: result : ok [ response { s | data |: objects { test | 389bf14c-f2a0-43c1-8238-1385c085fb77 |: m { s | num |: n | 5 |, s | name |: s | test_5 |, }, test | 9fdfb3e5-fd52-4d0b-a272-987b69b1de4a |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 7462f079-9530-4524-ae4a-964ab0802863 |: m { s | name |: s | test_7 |, s | num |: n | 7 |, }, test | 50ae135a-b261-4b28-871d-15479064cf1f |: m { s | num |: n | 8 |, s | name |: s | test_8 |, }, test | 3a4fc899-9a51-49c7-b59b-33c00d1d14ea |: m { s | num |: n | 9 |, s | name |: s | test_9 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Offset"},{"location":"documentation/offset/#example","text":"Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], offset ( n | 5 |), ]; Output: result : ok [ response { s | data |: objects { test | 389bf14c-f2a0-43c1-8238-1385c085fb77 |: m { s | num |: n | 5 |, s | name |: s | test_5 |, }, test | 9fdfb3e5-fd52-4d0b-a272-987b69b1de4a |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 7462f079-9530-4524-ae4a-964ab0802863 |: m { s | name |: s | test_7 |, s | num |: n | 7 |, }, test | 50ae135a-b261-4b28-871d-15479064cf1f |: m { s | num |: n | 8 |, s | name |: s | test_8 |, }, test | 3a4fc899-9a51-49c7-b59b-33c00d1d14ea |: m { s | num |: n | 9 |, s | name |: s | test_9 |, }, }, s | meta |: find_meta { s | count |: n | 5 |, }, }, ];","title":"Example"},{"location":"documentation/pipelines/","text":"Query Set Query in the AnnaDB is a pipeline of steps, that should be applied for a collection. Transaction","title":"Pipelines"},{"location":"documentation/pipelines/#query-set","text":"Query in the AnnaDB is a pipeline of steps, that should be applied for a collection.","title":"Query Set"},{"location":"documentation/pipelines/#transaction","text":"","title":"Transaction"},{"location":"documentation/queries/","text":"","title":"Queries"},{"location":"documentation/sort/","text":"Sort found objects Prefix: sort Value: Vector of sort operators Can start the pipeline: No Steps before: find, get, sort, limit, offset Steps after: find, get, sort, limit, offset, update, delete Sort operators: Asc - asc(...) Desc - desc(...) Example Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], ]; Output: result : ok [ response { s | data |: objects { test | f4681b02-ea08-4a61-9f6a-0a594cf51698 |: m { s | name |: s | test_0 |, s | num |: n | 0 |, }, test | 0525e465-5eb3-48e2-a7f0-2877708a8954 |: m { s | num |: n | 1 |, s | name |: s | test_1 |, }, test | 4d00c24b-cbde-4a58-8a7e-33e178a9dfdb |: m { s | name |: s | test_2 |, s | num |: n | 2 |, }, test | 8ab059c1-c534-4f01-817f-545cde80e44e |: m { s | num |: n | 3 |, s | name |: s | test_3 |, }, test | a9b414fd-73bb-4dea-b932-f8e004bc1d70 |: m { s | name |: s | test_4 |, s | num |: n | 4 |, }, test | 96c400aa-4da0-4cff-baa9-edc22a65febf |: m { s | num |: n | 5 |, s | name |: s | test_5 |, }, test | 7a3c2b26-3ae8-48a4-b634-1be226f3a5dd |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 60ff8913-d040-41de-b4f8-126f84bda835 |: m { s | num |: n | 7 |, s | name |: s | test_7 |, }, test | 50ff3d5b-2a86-4039-baa7-3333228018d9 |: m { s | num |: n | 8 |, s | name |: s | test_8 |, }, test | 7086d538-9643-4826-87f7-46a0151ee07b |: m { s | name |: s | test_9 |, s | num |: n | 9 |, }, }, s | meta |: find_meta { s | count |: n | 10 |, }, }, ];","title":"Sort"},{"location":"documentation/sort/#example","text":"Input: collection | test |: q [ find [ ], sort [ asc ( value | num |), ], ]; Output: result : ok [ response { s | data |: objects { test | f4681b02-ea08-4a61-9f6a-0a594cf51698 |: m { s | name |: s | test_0 |, s | num |: n | 0 |, }, test | 0525e465-5eb3-48e2-a7f0-2877708a8954 |: m { s | num |: n | 1 |, s | name |: s | test_1 |, }, test | 4d00c24b-cbde-4a58-8a7e-33e178a9dfdb |: m { s | name |: s | test_2 |, s | num |: n | 2 |, }, test | 8ab059c1-c534-4f01-817f-545cde80e44e |: m { s | num |: n | 3 |, s | name |: s | test_3 |, }, test | a9b414fd-73bb-4dea-b932-f8e004bc1d70 |: m { s | name |: s | test_4 |, s | num |: n | 4 |, }, test | 96c400aa-4da0-4cff-baa9-edc22a65febf |: m { s | num |: n | 5 |, s | name |: s | test_5 |, }, test | 7a3c2b26-3ae8-48a4-b634-1be226f3a5dd |: m { s | num |: n | 6 |, s | name |: s | test_6 |, }, test | 60ff8913-d040-41de-b4f8-126f84bda835 |: m { s | num |: n | 7 |, s | name |: s | test_7 |, }, test | 50ff3d5b-2a86-4039-baa7-3333228018d9 |: m { s | num |: n | 8 |, s | name |: s | test_8 |, }, test | 7086d538-9643-4826-87f7-46a0151ee07b |: m { s | name |: s | test_9 |, s | num |: n | 9 |, }, }, s | meta |: find_meta { s | count |: n | 10 |, }, }, ];","title":"Example"},{"location":"documentation/transactions/","text":"","title":"Transactions"},{"location":"documentation/update/","text":"Update values of found objects Prefix: update Value: Vector of update operators Can start the pipeline: No Steps before: find, get, sort, limit, offset Steps after: - Operators: Inc - inc(...) Set - set(...) Example Input: collection | test |: q [ find [ gt { value | num |: n | 5 |, }, ], update [ set { value | num |: n | 1000 |, }, ], ]; Output: result : ok [ response { s | data |: ids [ test | 3f1e200e-56c1-497e-b28e-f19a8b66e1c4 |, test | 86ad58df-d89a-4330-adc8-74e829fb763c |, test | a1c7a8f5-ea1b-4b64-94df-6e3ceda58f14 |, test | e0618ba0-3ed9-45a4-869c-69e723f5ead5 |, ], s | meta |: update_meta { s | count |: n | 4 |, }, }, ];","title":"Update"},{"location":"documentation/update/#operators","text":"Inc - inc(...) Set - set(...)","title":"Operators:"},{"location":"documentation/update/#example","text":"Input: collection | test |: q [ find [ gt { value | num |: n | 5 |, }, ], update [ set { value | num |: n | 1000 |, }, ], ]; Output: result : ok [ response { s | data |: ids [ test | 3f1e200e-56c1-497e-b28e-f19a8b66e1c4 |, test | 86ad58df-d89a-4330-adc8-74e829fb763c |, test | a1c7a8f5-ea1b-4b64-94df-6e3ceda58f14 |, test | e0618ba0-3ed9-45a4-869c-69e723f5ead5 |, ], s | meta |: update_meta { s | count |: n | 4 |, }, }, ];","title":"Example"},{"location":"tutorial/native/","text":"The page is under construction","title":"Native"},{"location":"tutorial/native/#the-page-is-under-construction","text":"","title":"The page is under construction"},{"location":"tutorial/python/","text":"The page is under construction","title":"Python"},{"location":"tutorial/python/#the-page-is-under-construction","text":"","title":"The page is under construction"}]}